name: "PR Vulnerability Scan"

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  actions: read
  checks: write
  security-events: write

jobs:
  sast-sca:
    if: ${{ github.head_ref == 'codex' }}
    name: Dependency and code security analysis
    runs-on: ubuntu-latest
    env:
      ENABLE_DAST: ${{ vars.ENABLE_DAST }}
    steps:
      - name: Shared repository and Python setup
        uses: ./.github/actions/shared-security-setup
        with:
          cache-dependency-path: |
            requirements.txt
            **/requirements*.txt
      - name: Install security tooling
        run: |
          pip install pip-audit bandit semgrep
      - name: Install project dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      - name: Run pip-audit (SCA)
        shell: bash
        run: |
          set -uo pipefail
          mkdir -p security-reports/status
          EXIT_CODE=0
          pip-audit \
            --progress-spinner off \
            --format json \
            --output security-reports/pip-audit-report.json || EXIT_CODE=$?
          echo "$EXIT_CODE" > security-reports/status/pip-audit.exit_code
      - name: Run bandit (SAST)
        shell: bash
        run: |
          set -uo pipefail
          mkdir -p security-reports/status
          EXIT_CODE=0
          bandit -r src -ll -ii -f json -o security-reports/bandit-report.json || EXIT_CODE=$?
          echo "$EXIT_CODE" > security-reports/status/bandit.exit_code
      - name: Run semgrep (SAST)
        shell: bash
        run: |
          set -uo pipefail
          mkdir -p security-reports/status
          EXIT_CODE=0
          semgrep --config=auto --sarif --output security-reports/semgrep.sarif || EXIT_CODE=$?
          echo "$EXIT_CODE" > security-reports/status/semgrep.exit_code
      - name: Upload Semgrep SARIF to code scanning
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-reports/semgrep.sarif
      - name: Run optional DAST probes
        if: ${{ env.ENABLE_DAST == 'true' }}
        run: |
          echo "DAST scans enabled via repository variables."
          # Placeholder command for ZAP or other tooling.
      - name: Evaluate scan results
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          status_dir="security-reports/status"
          overall=0
          if [ -d "$status_dir" ]; then
            for status_file in "$status_dir"/*.exit_code; do
              [ -e "$status_file" ] || continue
              tool_name=$(basename "$status_file" .exit_code)
              exit_code=$(cat "$status_file")
              if [ "$exit_code" -ne 0 ]; then
                echo "::error::${tool_name} reported findings (exit code ${exit_code})."
                overall=1
              fi
            done
          fi
          if [ "$overall" -ne 0 ]; then
            exit 1
          fi
      - name: Upload vulnerability scan artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pr-vulnerability-scan-${{ github.run_number }}
          path: security-reports/
          if-no-files-found: error
          retention-days: 30
