name: Post Commit Summary to Discussions

on:
  push:
    branches:
      - main

jobs:
  post-commit-discussion:
    name: Post commit summary discussion
    runs-on: ubuntu-latest
    env:
      DISCUSSION_TOKEN: ${{ secrets.DISCUSSION_TOKEN }}
      DISCUSSION_CATEGORY_ID: ${{ secrets.DISCUSSION_CATEGORY_ID }}
      DISCUSSION_POST_ENABLED: ${{ secrets.ENABLE_COMMIT_DISCUSSIONS }}
    steps:
      - name: Check if discussion posting is enabled
        id: gate
        run: |
          if [[ -z "${DISCUSSION_POST_ENABLED}" || "${DISCUSSION_POST_ENABLED}" != "true" ]]; then
            echo "enabled=false" >> "${GITHUB_OUTPUT}"
            echo "Discussion posting disabled by DISCUSSION_POST_ENABLED flag."
          else
            echo "enabled=true" >> "${GITHUB_OUTPUT}"
          fi

      - name: Checkout repository
        if: steps.gate.outputs.enabled == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Validate discussion credentials
        if: steps.gate.outputs.enabled == 'true'
        run: |
          if [[ -z "${DISCUSSION_TOKEN}" ]]; then
            echo "DISCUSSION_TOKEN is required to create discussions." >&2
            exit 1
          fi
          if [[ -z "${DISCUSSION_CATEGORY_ID}" ]]; then
            echo "DISCUSSION_CATEGORY_ID is required to create discussions." >&2
            exit 1
          fi

      - name: Collect commit details
        if: steps.gate.outputs.enabled == 'true'
        id: commit_data
        run: |
          python <<'PY'
import os
import subprocess

sha = os.environ["GITHUB_SHA"]


def run(cmd):
    return subprocess.check_output(cmd, text=True).strip()


def format_changed_lines(output):
    lines = [line for line in output.splitlines() if line.strip()]
    return lines, "\n".join(f"- {line}" for line in lines) if lines else "- None"


def extract_workflow_updates(lines):
    workflow_lines = []
    for line in lines:
        parts = line.split("\t")
        if len(parts) < 2:
            continue
        candidate_path = parts[-1]
        if candidate_path.startswith(".github/workflows/"):
            workflow_lines.append(line)
    return "\n".join(f"- {line}" for line in workflow_lines) if workflow_lines else "- None"


commit_info = run(["git", "show", "-s", "--format=%H%n%an%n%ae%n%ad%n%s", sha]).splitlines()
commit_hash, author_name, author_email, commit_date, commit_subject = commit_info

try:
    previous_sha = run(["git", "rev-parse", f"{sha}^"])
    changed_output = run(["git", "diff", "--name-status", previous_sha, sha])
except subprocess.CalledProcessError:
    changed_output = run(["git", "show", "--pretty=", "--name-status", sha])

changed_lines, changed_files_section = format_changed_lines(changed_output)
workflow_section = extract_workflow_updates(changed_lines)

body = f"""## Commit Metadata
- SHA: `{commit_hash}`
- Author: {author_name} <{author_email}>
- Date: {commit_date}
- Subject: {commit_subject}

## Changed Files
{changed_files_section}

## Updated Workflows
{workflow_section}
"""

with open("discussion_body.md", "w", encoding="utf-8") as handle:
    handle.write(body)

output_path = os.environ["GITHUB_OUTPUT"]
with open(output_path, "a", encoding="utf-8") as handle:
    handle.write(f"title=A-05 Update â€” {commit_hash[:7]} Summary\n")
PY

      - name: Create discussion
        if: steps.gate.outputs.enabled == 'true'
        env:
          DISCUSSION_TITLE: ${{ steps.commit_data.outputs.title }}
        run: |
          payload=$(jq -n \
            --arg title "$DISCUSSION_TITLE" \
            --arg body "$(<discussion_body.md)" \
            --arg category "${DISCUSSION_CATEGORY_ID}" \
            '{title: $title, body: $body, category_id: $category}')

          response=$(curl -sS -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${DISCUSSION_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "$payload" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/discussions")

          body=$(sed '$d' <<<"$response")
          status=$(tail -n1 <<<"$response")

          echo "Response status: $status"
          if [[ -z "$status" || $status -lt 200 || $status -ge 300 ]]; then
            echo "Failed to create discussion" >&2
            echo "$body"
            exit 1
          fi
          echo "$body"
