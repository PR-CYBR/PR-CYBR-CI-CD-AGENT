name: terraform-cloud-workflow-bridge

on:
  push:
    branches:
      - codex     # AI-driven commits (Codex Platform)
      - agents    # Agent-driven inter-repo commits
  pull_request:
    branches:
      - main      # All PRs targeting main branch (HITL control)

permissions:
  contents: read
  id-token: write   # Required for GitHub OIDC token exchange with Terraform Cloud

jobs:
  trigger-terraform-cloud-run:
    runs-on: ubuntu-latest

    env:
      TFC_WORKFLOW_BRIDGE_URL: ${{ vars.TFC_WORKFLOW_BRIDGE_URL }}
      TFC_WORKFLOW_AUDIENCE: ${{ vars.TFC_WORKFLOW_AUDIENCE }}
      TFC_WORKSPACE_NAME: ${{ vars.TFC_WORKSPACE_NAME }}

    steps:
      - name: Validate Terraform Cloud workflow bridge configuration
        run: |
          set -euo pipefail
          if [ -z "${TFC_WORKFLOW_BRIDGE_URL}" ]; then
            echo "::error::Repository variable TFC_WORKFLOW_BRIDGE_URL is not configured."
            echo "::error::Set it to the Terraform Cloud workflow bridge invocation URL."
            exit 1
          fi
          if [ -z "${TFC_WORKSPACE_NAME}" ]; then
            echo "::warning::Repository variable TFC_WORKSPACE_NAME is not configured."
            echo "::warning::Continuing without an explicit workspace hint."
          fi

      - name: Generate GitHub OIDC token for Terraform Cloud
        id: oidc-token
        uses: actions/github-script@v7
        env:
          AUDIENCE: ${{ env.TFC_WORKFLOW_AUDIENCE }}
        with:
          script: |
            const audience = process.env.AUDIENCE && process.env.AUDIENCE.trim() !== ''
              ? process.env.AUDIENCE
              : 'app.terraform.io';
            core.info(`Requesting GitHub OIDC token for audience: ${audience}`);
            const token = await core.getIDToken(audience);
            if (!token) {
              core.setFailed('Failed to obtain GitHub OIDC token');
              return;
            }
            core.setSecret(token);
            core.setOutput('token', token);

      - name: Trigger Terraform Cloud workflow bridge run
        env:
          BRIDGE_URL: ${{ env.TFC_WORKFLOW_BRIDGE_URL }}
          WORKSPACE_NAME: ${{ env.TFC_WORKSPACE_NAME }}
          TOKEN: ${{ steps.oidc-token.outputs.token }}
        run: |
          set -euo pipefail

          if [ -z "${TOKEN}" ]; then
            echo "::error::Missing GitHub OIDC token output."
            exit 1
          fi

          payload=$(jq -n \
            --arg repository "${GITHUB_REPOSITORY}" \
            --arg ref "${GITHUB_REF}" \
            --arg sha "${GITHUB_SHA}" \
            --arg event "${GITHUB_EVENT_NAME}" \
            --arg actor "${GITHUB_ACTOR}" \
            --arg workflow "${GITHUB_WORKFLOW}" \
            --arg run_id "${GITHUB_RUN_ID}" \
            --arg run_attempt "${GITHUB_RUN_ATTEMPT}" \
            --arg workspace "${WORKSPACE_NAME}" \
            '{
              repository: $repository,
              ref: $ref,
              sha: $sha,
              event: $event,
              actor: $actor,
              workflow: $workflow,
              run_id: $run_id,
              run_attempt: $run_attempt,
              workspace: ($workspace // null)
            }')

          echo "Dispatching Terraform Cloud workflow bridge run..."

          curl --fail --silent --show-error \
            --request POST \
            --header "Authorization: Bearer ${TOKEN}" \
            --header 'Content-Type: application/json' \
            --data "${payload}" \
            "${BRIDGE_URL}"

      - name: Confirm dispatch acknowledgement
        if: success()
        run: |
          echo "Terraform Cloud workflow bridge acknowledged the request."
          echo "Monitor the corresponding run directly in Terraform Cloud for plan/apply progress."
